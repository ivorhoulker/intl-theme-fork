"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.wrapPageElement = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactHelmet = require("react-helmet");

var _constants = require("./constants");

/**
 * Wrap all pages with a Translation provider and set the language on SSR time
 */
const wrapPageElement = ({
  element,
  props
}, pluginOptions) => {
  const {
    excludedPages,
    supportedLanguages,
    siteUrl,
    defaultLanguage
  } = Object.assign({}, _constants.DEFAULT_OPTIONS, {}, pluginOptions); // The fallbacks are for pages that are non-localized. The only pages that are non localized are
  // the original ones which are only there if `deleteOriginalPages` option is `false`

  const lang = props.pageContext.lang || defaultLanguage;
  const originalPath = props.pageContext.originalPath || props.location.pathname;

  if (excludedPages.includes(props.location.pathname)) {
    return element;
  }

  const langUrlDict = {
    'zh-Hant': 'hk',
    'zh-Hans': 'cn',
    'en-US': 'en',
    'en-GB': 'en',
    en: 'en',
    zh: 'zh'
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactHelmet.Helmet, {
    htmlAttributes: {
      lang,
      dir: 'ltr'
    }
  }, /*#__PURE__*/_react.default.createElement("meta", {
    property: "og:locale",
    content: lang
  }), /*#__PURE__*/_react.default.createElement("link", {
    rel: "canonical",
    href: `${siteUrl}/${lang}${originalPath}`
  }), /*#__PURE__*/_react.default.createElement("link", {
    rel: "alternate",
    href: `${siteUrl}${originalPath}`,
    hrefLang: "x-default"
  }), supportedLanguages.map(supportedLang => /*#__PURE__*/_react.default.createElement("link", {
    rel: "alternate",
    href: `${siteUrl}/${langUrlDict[supportedLang]}${originalPath}`,
    hrefLang: supportedLang,
    key: supportedLang
  }))), element);
};

exports.wrapPageElement = wrapPageElement;